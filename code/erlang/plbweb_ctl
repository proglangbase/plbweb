#!/usr/bin/env escript
-mode(compile).
-include("../../dep/plbcom/code/erlang/config.hrl").

-define(COM_PATH, ?MODULE_PATH ++ "/../../dep/plbcom/code/erlang").

main([Cmd]) ->
  make:all([{emake, [?COM_PATH ++ "/plb*", ?MODULE_PATH++"/*"]}]),
  c:l(plb_com),
  try
    plb_ctl:init(),
    case list_to_atom(string:lowercase(Cmd)) of
      start   -> start();
      stop    -> stop();
      restart -> restart();
      status  -> status();
      _       -> main([])
    end,
    halt(0)
  catch
    {error,  Info} -> plb_ctl:report(io_lib:format("error: ~p", [Info])),     halt(1);
    {Source, Msg}  -> plb_ctl:report(io_lib:format("~p: ~s", [Source, Msg])), halt(1)
  end;

main(_) -> io:format("usage:~n", []).

start() ->
  case plb_ctl:start_node(?WEB_NODE_NAME, ?WEB_NODE_COOKIE) of
    already_running ->
      plb_ctl:report(?WEB_NODE_SNAME ++ " already running");
    ok ->
      plb_ctl:rpc(?WEB_NODE_NAME, plbwebinets, acquire, []),
      status()
  end.

stop() ->
  plb_ctl:stop_node(?WEB_NODE_NAME, ?WEB_NODE_COOKIE),
  status().

restart() ->
  case plb_ctl:is_node_running(?WEB_NODE_NAME) of
    true -> stop();
    _ -> ok
  end,
  start().

status() ->
  case plb_ctl:is_node_running(?WEB_NODE_NAME) of
    true  -> plb_ctl:report(?WEB_NODE_SNAME ++ " is running");
    false -> plb_ctl:report(?WEB_NODE_SNAME ++ " not running")
  end.
